! Lists.i6

#IFDEF I7_HEAP_SIZE; ! Will exist if any use is made of heap

! A list is organised as:
! Word 0: base type stored within
! Word 1: length
! Words 2, ..., L+1: entries

Constant BASE_KIND_F = 0;
Constant LIST_LENGTH_F = 1;
Constant LIST_ENTRY_COMPARE_F = 2;
Constant LIST_ENTRY_BASE = 3;

! Compulsory services required by NI:

[ I7_LIST_OF_TY_Create skov list;
	list = I7_Blk_Allocate(24*WORDSIZE, LIST_OF_TY, BLK_FLAG_MULTIPLE + BLK_FLAG_WORD);
	I7_Blk_Put(list, BASE_KIND_F, skov);
	I7_Blk_Put(list, LIST_LENGTH_F, 0);
	I7_Blk_Put(list, LIST_ENTRY_COMPARE_F, I7_Comparison_Function_for_KOV(skov));
	return list;
];

[ I7_LIST_OF_TY_CopyRawArray list arr len i ex bk v w;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return false;
	ex = I7_Blk_Get_Extent(list);
!print "Extent ex = ", ex, "^";
!print "len = ", len, "^";
	len = arr-->2;
	if (len+LIST_ENTRY_BASE > ex) {
		if (I7_Blk_Change_Extent(list, len+LIST_ENTRY_BASE) == false)
			return 0;
	}
!print "Extended ok^";
	I7_Blk_Put(list, LIST_LENGTH_F, len);
	bk = arr-->1;
	I7_Blk_Put(list, BASE_KIND_F, bk);
	I7_Blk_Put(list, LIST_ENTRY_COMPARE_F, I7_Comparison_Function_for_KOV(arr-->1));
	for (i=0:i<len:i++) {
		v = arr-->(i+3);
		if (bk == LIST_OF_TY) {
			w = I7_LIST_OF_TY_Create(v-->1);
			I7_LIST_OF_TY_CopyRawArray(w, v);
			I7_Blk_Put(list, i+LIST_ENTRY_BASE, w);
		} else {
			I7_Blk_Put(list, i+LIST_ENTRY_BASE, v);
		}
	}
!	I7_LIST_OF_TY_Say(list, true);
	return list;
];

[ I7_LIST_OF_TY_Say list format dsize v i bk;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return;
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	bk = I7_Blk_Get(list, BASE_KIND_F);
	! print "(kov=", bk, ")";
	if (format == 1) print "{";
	for (i=0:i<dsize:i++) {
		v = I7_Blk_Get(list, i+LIST_ENTRY_BASE);
		switch (format) {
			2: print (the) v;
			3: print (a) v;
			default:
				if (bk == LIST_OF_TY) I7_LIST_OF_TY_Say(v, 1);
				else if ((bk == TEXT_TY or INDEXED_TEXT_TY) && (format == 1)) {
					print "~"; I7_Print_Kind_Value_Pair(bk, v); print "~";
				}
				else I7_Print_Kind_Value_Pair(bk, v);
		}
		if (i<dsize-2) print ", ";
		if (i==dsize-2) {
			#ifdef USE_SERIAL_COMMA; print ","; #endif;
			if (format == 1) print ", "; else print " and ";
		}
	}
	if (format == 1) print "}";
];

[ I7_LIST_OF_TY_Compare listleft listright delta dsize i cf;
	delta = I7_Blk_Get(listleft, BASE_KIND_F) - I7_Blk_Get(listright, BASE_KIND_F);
	if (delta) return delta;
	delta = I7_Blk_Get(listleft, LIST_LENGTH_F) - I7_Blk_Get(listright, LIST_LENGTH_F);
	if (delta) return delta;
	dsize = I7_Blk_Get(listleft, LIST_LENGTH_F);
	cf = I7_Blk_Get(listleft, LIST_ENTRY_COMPARE_F);
	if (cf == 0 or UnsignedCompare) {
		for (i=0; i<dsize; i++) {
			delta = I7_Blk_Get(listleft, i+LIST_ENTRY_BASE) -
				I7_Blk_Get(listright, i+LIST_ENTRY_BASE);
			if (delta) return delta;
		}
	} else {
		for (i=0; i<dsize; i++) {
			delta = cf(I7_Blk_Get(listleft, i+LIST_ENTRY_BASE),
				I7_Blk_Get(listright, i+LIST_ENTRY_BASE));
			if (delta) return delta;
		}
	}
	return 0;
];

[ I7_LIST_OF_TY_Distinguish txb1 txb2;
	if (I7_LIST_OF_TY_Compare(txb1, txb2) == 0) rfalse;
	rtrue;
];

[ I7_LIST_OF_TY_Free list dsize i;
	if (I7_KOV_On_Heap(I7_Blk_Get(list, BASE_KIND_F))) {
		dsize = I7_Blk_Get(list, LIST_LENGTH_F);
		for (i=0; i<dsize; i++) {
			I7_Blk_Free(I7_Blk_Get(list, i+LIST_ENTRY_BASE));
		}
		!print "All ", dsize, " freed^";
	}
	return list;
];

[ I7_LIST_OF_TY_Deep_Copy lto lfrom list dsize i nv bk;
	if (I7_KOV_On_Heap(I7_Blk_Get(lfrom, BASE_KIND_F))) {
		dsize = I7_Blk_Get(lfrom, LIST_LENGTH_F);
		bk = I7_Blk_Get(lfrom, BASE_KIND_F);
		for (i=0; i<dsize; i++) {
			nv = I7_Blk_Create(bk);
			I7_Blk_Deep_Copy(nv, I7_Blk_Get(lfrom, i+LIST_ENTRY_BASE));
			I7_Blk_Put(lto, i+LIST_ENTRY_BASE, nv);
		}
	}
];

! Optional services used only by definitions in the Standard Rules:

[ I7_LIST_OF_TY_Desc list desc obj dsize ex len i;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return false;
	ex = I7_Blk_Get_Extent(list);
	len = 0;
	for (obj=desc(-2, nothing): obj: obj=desc(-2, obj)) len++;
	if (len+LIST_ENTRY_BASE > ex) {
		if (I7_Blk_Change_Extent(list, len+LIST_ENTRY_BASE) == false)
			return 0;
	}
	I7_Blk_Put(list, BASE_KIND_F, OBJECT_TY);
	I7_Blk_Put(list, LIST_LENGTH_F, len);
	for (obj=desc(-2, nothing), i=0: obj: obj=desc(-2, obj), i++)
		I7_Blk_Put(list, i+LIST_ENTRY_BASE, obj);
	return list;
];

[ I7_LIST_OF_TY_Add_Entry list v posnflag posn nodups i dsize ex nv;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return false;
	if (nodups && (I7_LIST_OF_TY_Find_Entry(list, v))) return list;
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if (posnflag) {
		if ((posn<1) || (posn > dsize+1)) {
			print "*** Couldn't add at entry ", posn, " in the list ";
			I7_LIST_OF_TY_Say(list, true);
			print ", which has entries in the range 1 to ", dsize, " ***^";
			rfalse;
		}
	}
	ex = I7_Blk_Get_Extent(list);
	if (dsize+LIST_ENTRY_BASE+1 > ex) {
		if (I7_Blk_Change_Extent(list, ex+16) == false) return 0;
	}
	if (I7_KOV_On_Heap(I7_Blk_Get(list, BASE_KIND_F))) {
		nv = I7_Blk_Create(I7_Blk_Get(list, BASE_KIND_F));
		I7_Blk_Deep_Copy(nv, v);
		v = nv;
	}
	if (posnflag) {
		posn--;
		for (i=dsize:i>posn:i--) {
			I7_Blk_Put(list, i+LIST_ENTRY_BASE,
				I7_Blk_Get(list, i-1+LIST_ENTRY_BASE));			
		}
		I7_Blk_Put(list, posn+LIST_ENTRY_BASE, v);
	} else {
		I7_Blk_Put(list, dsize+LIST_ENTRY_BASE, v);
	}
	I7_Blk_Put(list, LIST_LENGTH_F, dsize+1);
	return list;
];

[ I7_LIST_OF_TY_AppendList list more posnflag posn nodups v i j dsize msize ex nv;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return false;
	if ((more==0) || (I7_Blk_Type(more) ~= LIST_OF_TY)) return list;
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if (posnflag) {
		if ((posn<1) || (posn > dsize+1)) {
			print "*** Couldn't add at entry ", posn, " in the list ";
			I7_LIST_OF_TY_Say(list, true);
			print ", which has entries in the range 1 to ", dsize, " ***^";
			rfalse;
		}
	}
	msize = I7_Blk_Get(more, LIST_LENGTH_F);
	ex = I7_Blk_Get_Extent(list);
	if (dsize+msize+LIST_ENTRY_BASE > ex) {
		if (I7_Blk_Change_Extent(list, dsize+msize+LIST_ENTRY_BASE+8) == false)
			return 0;
	}
	if (posnflag) {
		posn--;
		for (i=dsize+msize:i>=posn+msize:i--) {
			I7_Blk_Put(list, i+LIST_ENTRY_BASE,
				I7_Blk_Get(list, i-msize+LIST_ENTRY_BASE));			
		}
		I7_Blk_Put(list, posn, v);
		for (j=0: j<msize: j++) {
			v = I7_Blk_Get(more, j+LIST_ENTRY_BASE);
			if (I7_KOV_On_Heap(I7_Blk_Get(list, BASE_KIND_F))) {
				nv = I7_Blk_Create(I7_Blk_Get(list, BASE_KIND_F));
				I7_Blk_Deep_Copy(nv, v);
				v = nv;
			}
			I7_Blk_Put(list, posn+j+LIST_ENTRY_BASE, v);
		}
	} else {
		for (i=0, j=0: i<msize: i++) {
			v = I7_Blk_Get(more, i+LIST_ENTRY_BASE);
			if (I7_KOV_On_Heap(I7_Blk_Get(list, BASE_KIND_F))) {
				nv = I7_Blk_Create(I7_Blk_Get(list, BASE_KIND_F));
				I7_Blk_Deep_Copy(nv, v);
				v = nv;
			}
			if ((nodups == 0) || (I7_LIST_OF_TY_Find_Entry(list, v) == false)) {
				I7_Blk_Put(list, dsize+j+LIST_ENTRY_BASE, v);
				j++;
			}
		}
	}
	I7_Blk_Put(list, LIST_LENGTH_F, dsize+j);
	return list;
];

[ I7_LIST_OF_TY_Find_Entry list v i dsize cf;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) rfalse;
	cf = I7_Blk_Get(list, LIST_ENTRY_COMPARE_F);
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if (cf == 0 or UnsignedCompare) {
		for (i=0; i<dsize; i++)
			if (v == I7_Blk_Get(list, i+LIST_ENTRY_BASE)) rtrue;
	} else {
		for (i=0; i<dsize; i++)
			if (cf(v, I7_Blk_Get(list, i+LIST_ENTRY_BASE)) == 0) rtrue;
	}
	rfalse;
];

[ I7_LIST_OF_TY_Remove_Entry list v forgive i j dsize odsize f cf;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) rfalse;
	cf = I7_Blk_Get(list, LIST_ENTRY_COMPARE_F);
	dsize = I7_Blk_Get(list, LIST_LENGTH_F); odsize = dsize;
	for (i=0; i<dsize; i++) {
		if (cf == 0 or UnsignedCompare)
			f = (v == I7_Blk_Get(list, i+LIST_ENTRY_BASE));
		else
			f = (cf(v, I7_Blk_Get(list, i+LIST_ENTRY_BASE)) == 0);
		if (f) {
			if (I7_KOV_On_Heap(I7_Blk_Get(list, BASE_KIND_F))) {
				I7_Blk_Free(I7_Blk_Get(list, i+LIST_ENTRY_BASE));
			}
			for (j=i+1; j<dsize; j++)
				I7_Blk_Put(list, j-1+LIST_ENTRY_BASE,
					I7_Blk_Get(list, j+LIST_ENTRY_BASE));
			dsize--; i--;
			I7_Blk_Put(list, LIST_LENGTH_F, dsize);
		}
	}
	if (odsize ~= dsize) rfalse;
	if (forgive) rfalse;
	print "*** Couldn't remove: the value ";
	I7_Print_Kind_Value_Pair(I7_Blk_Get(list, BASE_KIND_F), v);
	print " was not present in the list ";
	I7_LIST_OF_TY_Say(list, true);
	" ***";
];

[ I7_LIST_OF_TY_Remove_Range list from to forgive i d dsize;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) rfalse;
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if ((from > to) || (from <= 0) || (to > dsize)) {
		if (forgive) {
			if (from <= 0) from = 1;
			if (to >= dsize) to = dsize;
			if (from > to) return list;
		} else {
			print "*** Couldn't remove entries ", from, " to ", to, " from the list ";
			I7_LIST_OF_TY_Say(list, true);
			print ", which has entries in the range 1 to ", dsize, " ***^";
			rfalse;
		}
	}
	to--; from--;
	d = to-from+1;
	for (i=from: i<dsize-d: i++)
		I7_Blk_Put(list, i+LIST_ENTRY_BASE,
			I7_Blk_Get(list, i+d+LIST_ENTRY_BASE));
	I7_Blk_Put(list, LIST_LENGTH_F, dsize-d);
	return list;
];

[ I7_LIST_OF_TY_Remove_List list rlist i j k v w dsize odsize rsize cf f;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) rfalse;
	!print "Remove "; I7_LIST_OF_TY_Say(rlist, true);
	!print " from ";I7_LIST_OF_TY_Say(list, true);
	dsize = I7_Blk_Get(list, LIST_LENGTH_F); odsize = dsize;
	rsize = I7_Blk_Get(rlist, LIST_LENGTH_F);
	cf = I7_Blk_Get(list, LIST_ENTRY_COMPARE_F);
	for (i=0: i<dsize: i++) {
		v = I7_Blk_Get(list, i+LIST_ENTRY_BASE);
		for (k=0: k<rsize: k++) {
			w = I7_Blk_Get(rlist, k+LIST_ENTRY_BASE);
			if (cf == 0 or UnsignedCompare)
				f = (v == w);
			else
				f = (cf(v, w) == 0);
			if (f) {
				! print "[out: ", (name) v, "] ";
				if (I7_KOV_On_Heap(I7_Blk_Get(list, BASE_KIND_F))) {
					I7_Blk_Free(v);
				}
				for (j=i+1: j<dsize: j++)
					I7_Blk_Put(list, j+LIST_ENTRY_BASE-1, 
						I7_Blk_Get(list, j+LIST_ENTRY_BASE));
				dsize--; i--;
				I7_Blk_Put(list, LIST_LENGTH_F, dsize);
				break;
			}
		}
	}
	!print " --> ";I7_LIST_OF_TY_Say(list, true); print "^";
	rfalse;
];

[ I7_LIST_OF_TY_Get_Entry list i dsize;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return false;
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if ((i<=0) || (i>dsize)) return false;
	return I7_Blk_Get(list, LIST_ENTRY_BASE+i-1);
];

[ WriteI7_LIST_OF_TY_Get_Entry list i val dsize;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return false;
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if ((i<=0) || (i>dsize)) {
		print "*** Couldn't write to list entry ", i, ": the list ";
		I7_LIST_OF_TY_Say(list, true);
		switch (dsize) {
			0: " is empty ***";
			1: " has only one entry, numbered 1 ***";
		}
		" has entries numbered from 1 to ", dsize, " ***";
	}
	I7_Blk_Put(list, LIST_ENTRY_BASE+i-1, val);
];

[ I7_LIST_OF_TY_Put_Entry list i v dsize nv;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return false;
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if (I7_KOV_On_Heap(I7_Blk_Get(list, BASE_KIND_F))) {
		nv = I7_Blk_Create(I7_Blk_Get(list, BASE_KIND_F));
		I7_Blk_Deep_Copy(nv, v);
		v = nv;
	}
	if ((i<=0) || (i>dsize)) return false;
	I7_Blk_Put(list, LIST_ENTRY_BASE+i-1, v);
];

[ I7_LIST_OF_TY_Get_Length list;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return 0;
	return I7_Blk_Get(list, LIST_LENGTH_F);
];

[ I7_LIST_OF_TY_Set_Length list newsize fl truncend dsize ex i dv;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return 0;
	if (newsize < 0) "*** Cannot resize a list to negative length ***";
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if (dsize < newsize) {
		if (fl == -1) return list;
		ex = I7_Blk_Get_Extent(list);
		if (newsize+LIST_ENTRY_BASE > ex) {
			if (I7_Blk_Change_Extent(list, newsize+LIST_ENTRY_BASE) == false)
				return 0;
		}
		dv = I7_Default_Value_of_KOV(I7_Blk_Get(list, BASE_KIND_F));
		for (i=dsize: i<newsize: i++)
			I7_Blk_Put(list, LIST_ENTRY_BASE+i, dv);
		I7_Blk_Put(list, LIST_LENGTH_F, newsize);
	}
	if (dsize > newsize) {
		if (fl == 1) return list;
		if (truncend == -1) {
			if (I7_KOV_On_Heap(I7_Blk_Get(list, BASE_KIND_F)))
				for (i=0: i<dsize-newsize: i++)
					I7_Blk_Free(I7_Blk_Get(list, LIST_ENTRY_BASE+i));
			for (i=0: i<newsize: i++)
				I7_Blk_Put(list, LIST_ENTRY_BASE+i,
					I7_Blk_Get(list, LIST_ENTRY_BASE+dsize-newsize+i));
		} else {
			if (I7_KOV_On_Heap(I7_Blk_Get(list, BASE_KIND_F)))
				for (i=newsize: i<dsize: i++)
					I7_Blk_Free(I7_Blk_Get(list, LIST_ENTRY_BASE+i));
		}
		I7_Blk_Put(list, LIST_LENGTH_F, newsize);
	}
	return list;
];

[ I7_LIST_OF_TY_Reverse list dsize i v;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return 0;
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if (dsize < 2) return list;
	for (i=0;i*2<dsize;i++) {
		v = I7_Blk_Get(list, LIST_ENTRY_BASE+i);
		I7_Blk_Put(list, LIST_ENTRY_BASE+i, I7_Blk_Get(list, LIST_ENTRY_BASE+dsize-1-i));
		I7_Blk_Put(list, LIST_ENTRY_BASE+dsize-1-i, v);
	}
	return list;
];

[ I7_LIST_OF_TY_Rotate list backwards dsize i v;
	if ((list==0) || (I7_Blk_Type(list) ~= LIST_OF_TY)) return 0;
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if (dsize < 2) return list;
	if (backwards) {
		v = I7_Blk_Get(list, LIST_ENTRY_BASE);
		for (i=0:i<dsize-1:i++)
			I7_Blk_Put(list, LIST_ENTRY_BASE+i,
				I7_Blk_Get(list, LIST_ENTRY_BASE+i+1));
		I7_Blk_Put(list, dsize-1+LIST_ENTRY_BASE, v);
	} else {
		v = I7_Blk_Get(list, dsize-1+LIST_ENTRY_BASE);
		for (i=dsize-1:i>0:i--)
			I7_Blk_Put(list, LIST_ENTRY_BASE+i,
				I7_Blk_Get(list, LIST_ENTRY_BASE+i-1));
		I7_Blk_Put(list, LIST_ENTRY_BASE, v);
	}
	return list;
];

[ ListSwapEntries list i j v;
	if (i==j) return;
	v = I7_Blk_Get(list, LIST_ENTRY_BASE+i-1);
	I7_Blk_Put(list, LIST_ENTRY_BASE+i-1, I7_Blk_Get(list, LIST_ENTRY_BASE+j-1));
	I7_Blk_Put(list, LIST_ENTRY_BASE+j-1, v);
];

[ ListCompareEntries list col i j d cf;
	if (i==j) return 0;
	if (I7S_Col) {
		i = I7_Blk_Get(list, LIST_ENTRY_BASE+i-1);
		j = I7_Blk_Get(list, LIST_ENTRY_BASE+j-1);
		!print "prop=", I7S_Col, " on ", (name) i, " and ", (name) j, "^";
		!print "thus ", i.I7S_Col, " and ", j.I7S_Col, "^";
		if (i provides I7S_Col) i=i.I7S_Col; else i=0;
		if (j provides I7S_Col) j=j.I7S_Col; else j=0;
		return i - j;
	}
	cf = I7_Blk_Get(list, LIST_ENTRY_COMPARE_F);
	if (cf == 0)
		return I7_Blk_Get(list, LIST_ENTRY_BASE+i-1) -
			I7_Blk_Get(list, LIST_ENTRY_BASE+j-1);
	else
		return cf(I7_Blk_Get(list, LIST_ENTRY_BASE+i-1),
			I7_Blk_Get(list, LIST_ENTRY_BASE+j-1));
];

[ I7_LIST_OF_TY_Sort list dir prop i j dsize v;
	dsize = I7_Blk_Get(list, LIST_LENGTH_F);
	if (dir == 2) {
		if (dsize < 2) return;
		for (i=1:i<dsize:i++) {
			j = random(i+1) - 1;
			v = I7_Blk_Get(list, LIST_ENTRY_BASE+i);
			I7_Blk_Put(list, LIST_ENTRY_BASE+i, I7_Blk_Get(list, LIST_ENTRY_BASE+j));
			I7_Blk_Put(list, LIST_ENTRY_BASE+j, v);
		}
		return;
	}
	I7S_Tab = list;
	I7S_Col = prop;
	I7S_Dir = dir;
	I7S_Swap = ListSwapEntries;
	I7S_Comp = ListCompareEntries;
	I7_Sort_Range(0, dsize);
];

#IFNOT; ! IFDEF I7_HEAP_SIZE

[ I7_LIST_OF_TY_Say list; ];
[ I7_LIST_OF_TY_Create o; ];
[ I7_LIST_OF_TY_Cast a b c; ];

#ENDIF; ! IFDEF I7_HEAP_SIZE

! End of Lists.i6
